import{_ as i,c as e,o as l,a_ as r}from"./chunks/framework.YI5SBq3X.js";const _=JSON.parse('{"title":"前端性能优化的点","description":"","frontmatter":{},"headers":[],"relativePath":"fragments/performance/index.md","filePath":"fragments/performance/index.md"}'),t={name:"fragments/performance/index.md"};function n(o,a,s,c,d,h){return l(),e("div",null,a[0]||(a[0]=[r('<h1 id="前端性能优化的点" tabindex="-1">前端性能优化的点 <a class="header-anchor" href="#前端性能优化的点" aria-label="Permalink to &quot;前端性能优化的点&quot;">​</a></h1><h2 id="网络加载优化" tabindex="-1"><strong>网络加载优化</strong> <a class="header-anchor" href="#网络加载优化" aria-label="Permalink to &quot;**网络加载优化**&quot;">​</a></h2><ul><li>内联小资源（Base64编码的图片或关键CSS）</li><li>启用Gzip压缩（服务器配置）</li><li>启用cdn加速</li><li>缓存策略 （强缓存，协商缓存）</li><li>使用http2.0 <ul><li>二进制格式在协议的解析和优化扩展上带来更多的优势和可能</li><li>头部压缩，可以极大减少头部开销</li><li>户端和服务器可以将 HTTP消息分解为互不依赖的帧，然后交错发送</li></ul></li></ul><h2 id="渲染性能优化" tabindex="-1"><strong>渲染性能优化</strong> <a class="header-anchor" href="#渲染性能优化" aria-label="Permalink to &quot;**渲染性能优化**&quot;">​</a></h2><ul><li>JS使用defer或async避免阻塞DOM解析</li><li>减少重排（Reflow）与重绘（Repaint）</li><li>图片懒加载</li><li>WebP 替代 PNG/JPG <ul><li>更小的体积</li><li>无损压缩效率更高</li><li>支持透明通道</li></ul></li></ul><h2 id="javascript优化" tabindex="-1"><strong>JavaScript优化</strong> <a class="header-anchor" href="#javascript优化" aria-label="Permalink to &quot;**JavaScript优化**&quot;">​</a></h2><ul><li>代码分割与懒加载</li><li>Web Worker处理复杂计算</li><li>路由级动态加载</li></ul>',7)]))}const p=i(t,[["render",n]]);export{_ as __pageData,p as default};
