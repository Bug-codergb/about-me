import{_ as t,c as a,o as d,b0 as l}from"./chunks/framework.yGdRLqI0.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ts/utility-type/index.md","filePath":"ts/utility-type/index.md"}'),i={name:"ts/utility-type/index.md"};function r(o,e,p,c,n,s){return d(),a("div",null,e[0]||(e[0]=[l('<h2 id="partial-type" tabindex="-1">Partial&lt;Type&gt; <a class="header-anchor" href="#partial-type" aria-label="Permalink to &quot;Partial\\&lt;Type\\&gt;&quot;">​</a></h2><p><code>Partial</code>它可以将某个类型的所有属性变为可选属性</p><h2 id="required-type" tabindex="-1">Required&lt;Type&gt; <a class="header-anchor" href="#required-type" aria-label="Permalink to &quot;Required\\&lt;Type\\&gt;&quot;">​</a></h2><p>与 <code>Partial&lt;Type&gt;</code> 相反，它可以将类型中的所有可选属性转换为必需属性。</p><h2 id="readonly-type" tabindex="-1">Readonly&lt;Type&gt; <a class="header-anchor" href="#readonly-type" aria-label="Permalink to &quot;Readonly\\&lt;Type\\&gt;&quot;">​</a></h2><p><code>Readonly</code>它可以将类型中的所有属性转换为只读属性，防止对象被修改。</p><h2 id="pick-type-keys" tabindex="-1">Pick&lt;Type, Keys&gt; <a class="header-anchor" href="#pick-type-keys" aria-label="Permalink to &quot;Pick\\&lt;Type, Keys\\&gt;&quot;">​</a></h2><p><code>Pick</code>它可以从一个类型中选取一组属性键来构造新类型</p><h2 id="omit-type-keys" tabindex="-1">Omit&lt;Type, Keys&gt; <a class="header-anchor" href="#omit-type-keys" aria-label="Permalink to &quot;Omit\\&lt;Type, Keys\\&gt;&quot;">​</a></h2><p><code>Omit</code>它可以从一个类型中排除指定的属性键，用剩余的属性构造新类型。</p><h2 id="exclude-uniontype-excludedmembers" tabindex="-1">Exclude&lt;UnionType, ExcludedMembers&gt; <a class="header-anchor" href="#exclude-uniontype-excludedmembers" aria-label="Permalink to &quot;Exclude\\&lt;UnionType, ExcludedMembers\\&gt;&quot;">​</a></h2><p><code>Exclude&lt;UnionType, ExcludedMembers&gt;</code> 是 <code>TypeScript</code> 提供的实用类型，用于从联合类型中排除可以赋值给 ExcludedMembers 的类型成员。</p>',12)]))}const h=t(i,[["render",r]]);export{u as __pageData,h as default};
