import{_ as e,c as a,o as i,b0 as l}from"./chunks/framework.yGdRLqI0.js";const k=JSON.parse('{"title":"Flex布局","description":"","frontmatter":{},"headers":[],"relativePath":"html-css/flex/index.md","filePath":"html-css/flex/index.md"}'),n={name:"html-css/flex/index.md"};function t(h,s,p,d,o,r){return i(),a("div",null,s[0]||(s[0]=[l('<h1 id="flex布局" tabindex="-1">Flex布局 <a class="header-anchor" href="#flex布局" aria-label="Permalink to &quot;Flex布局&quot;">​</a></h1><h2 id="flex-1是那些属性的缩写" tabindex="-1"><code>flex:1</code>是那些属性的缩写 <a class="header-anchor" href="#flex-1是那些属性的缩写" aria-label="Permalink to &quot;```flex:1```是那些属性的缩写&quot;">​</a></h2><p>flex: 1; 是 CSS Flexbox 布局中的一个简写属性，它实际上是以下三个属性的缩写组合</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flex: 1;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 等价于 */</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-grow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1;</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-shrink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1;</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-basis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 0%;</span></span></code></pre></div><ul><li><code>flex-grow: 1</code> 定义项目的放大比例，默认值为 0（不放大）。 当容器有剩余空间时，该项目会按比例分配空间（此处为 1 份）。</li><li><code>flex-shrink: 1</code> 定义项目的缩小比例，默认值为 1（允许缩小）。 当容器空间不足时，该项目会按比例收缩（此处为 1 份）。</li><li><code>flex-basis: 0%</code> 定义项目在分配多余空间之前的初始大小，默认值为 auto（基于内容宽度）。</li></ul>',5)]))}const x=e(n,[["render",t]]);export{k as __pageData,x as default};
