import{_ as e,c as r,o as t,b0 as n}from"./chunks/framework.yGdRLqI0.js";const _=JSON.parse('{"title":"大屏可视化方案","description":"","frontmatter":{},"headers":[],"relativePath":"fragments/dashboard/index.md","filePath":"fragments/dashboard/index.md"}'),o={name:"fragments/dashboard/index.md"};function d(i,a,s,h,l,m){return t(),r("div",null,a[0]||(a[0]=[n('<h1 id="大屏可视化方案" tabindex="-1">大屏可视化方案 <a class="header-anchor" href="#大屏可视化方案" aria-label="Permalink to &quot;大屏可视化方案&quot;">​</a></h1><h2 id="基于-transform-的缩放" tabindex="-1">基于 transform 的缩放 <a class="header-anchor" href="#基于-transform-的缩放" aria-label="Permalink to &quot;基于 transform 的缩放&quot;">​</a></h2><p>通过UI稿的比例，计算至当前系统的宽高比，例如UI稿是1920*1080,，那么可以通过window.innerWidth,和window.innerHeight, 计算出一个比例，然后将比例设置到<code>transform:scale()</code>上面</p><h2 id="媒体查询适配" tabindex="-1">媒体查询适配 <a class="header-anchor" href="#媒体查询适配" aria-label="Permalink to &quot;媒体查询适配&quot;">​</a></h2><h2 id="通过rem-vh-vw的方案" tabindex="-1">通过rem + vh/vw的方案 <a class="header-anchor" href="#通过rem-vh-vw的方案" aria-label="Permalink to &quot;通过rem + vh/vw的方案&quot;">​</a></h2><p>如果UI稿的比例是1920*1080</p><p>那么可以通过 1920/real = 100vw/x 那么 x = 100*real / 1920 = real/19.2</p><p>x = 100vw * real / 1920 = real*(100/1920)</p>',8)]))}const f=e(o,[["render",d]]);export{_ as __pageData,f as default};
