import{_ as i,c as e,o as s,b0 as l}from"./chunks/framework.DkkuMtpH.js";const k=JSON.parse('{"title":"Webpack","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/pack-optimize/index.md","filePath":"engineering/pack-optimize/index.md"}'),t={name:"engineering/pack-optimize/index.md"};function r(n,a,h,o,d,p){return s(),e("div",null,a[0]||(a[0]=[l(`<h1 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h1><h2 id="避免全量处理" tabindex="-1">避免全量处理 <a class="header-anchor" href="#避免全量处理" aria-label="Permalink to &quot;避免全量处理&quot;">​</a></h2><p>在配置插件或者loader的时候使用exclude/include，精确化loader或者插件作用范围</p><h2 id="多线程-并行处理" tabindex="-1">多线程/并行处理 <a class="header-anchor" href="#多线程-并行处理" aria-label="Permalink to &quot;多线程/并行处理&quot;">​</a></h2><p>通过thread-loader多线程处理 JS</p><h2 id="缓存机制" tabindex="-1">缓存机制 <a class="header-anchor" href="#缓存机制" aria-label="Permalink to &quot;缓存机制&quot;">​</a></h2><ul><li>持久化缓存<code>（cache: { type: &#39;filesystem&#39; }）</code></li><li>babel-loader?cacheDirectory：Babel 编译结果缓存</li></ul><h2 id="构建目标" tabindex="-1">构建目标 <a class="header-anchor" href="#构建目标" aria-label="Permalink to &quot;构建目标&quot;">​</a></h2><ul><li>target：针对特定环境（如 &#39;web&#39; 或 &#39;browserslist&#39;）</li><li>devtool：生产环境避免使用 eval-cheap-source-map 等慢速 Source Map</li><li>Tree Shaking</li><li>TerserPlugin压缩js</li><li>css-minimizer-webpack-plugin：压缩 CSS。</li><li>按需加载与懒加载:import() 语法：动态加载路由组件或非关键模块</li><li>资源优化:压缩图片，小文件转 Base64 内联</li><li>CDN 引入</li><li>ignorePlugin：忽略无用的语言包</li></ul><h2 id="devserver" tabindex="-1">DevServer <a class="header-anchor" href="#devserver" aria-label="Permalink to &quot;DevServer&quot;">​</a></h2><ul><li>compress：启用 Gzip 压缩</li></ul><h1 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h1><h2 id="配置-cachedir-启用缓存" tabindex="-1">配置 cacheDir 启用缓存 <a class="header-anchor" href="#配置-cachedir-启用缓存" aria-label="Permalink to &quot;配置 cacheDir 启用缓存&quot;">​</a></h2><h2 id="减少依赖预构建" tabindex="-1">减少依赖预构建 <a class="header-anchor" href="#减少依赖预构建" aria-label="Permalink to &quot;减少依赖预构建&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optimizeDeps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;react-dom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lodash-es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 强制预构建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;不需要预构建的库&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 排除</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="多线程压缩" tabindex="-1">多线程压缩 <a class="header-anchor" href="#多线程压缩" aria-label="Permalink to &quot;多线程压缩&quot;">​</a></h2><p>但可通过 <code>vite-plugin-compression</code> 启用多线</p><h2 id="压缩资源" tabindex="-1">压缩资源 <a class="header-anchor" href="#压缩资源" aria-label="Permalink to &quot;压缩资源&quot;">​</a></h2><ul><li>JS/CSS 压缩：Vite 默认使用 ESBuild 压缩，无需额外配置。</li><li>图片压缩：使用 <code>vite-plugin-imagemin</code></li></ul><h2 id="cdn引入" tabindex="-1">CDN引入 <a class="header-anchor" href="#cdn引入" aria-label="Permalink to &quot;CDN引入&quot;">​</a></h2><p>通过 <code>rollup-plugin-external-globals</code> 将依赖外部化</p><h2 id="异步加载-dynamic-import" tabindex="-1">异步加载（Dynamic Import） <a class="header-anchor" href="#异步加载-dynamic-import" aria-label="Permalink to &quot;异步加载（Dynamic Import）&quot;">​</a></h2><p>Vite 自动支持 import() 动态加载</p>`,23)]))}const u=i(t,[["render",r]]);export{k as __pageData,u as default};
