import{_ as i,c as a,o as r,b0 as l}from"./chunks/framework.yGdRLqI0.js";const u=JSON.parse('{"title":"Fiber数据结构，以及流程","description":"","frontmatter":{},"headers":[],"relativePath":"react/fiber/index.md","filePath":"react/fiber/index.md"}'),t={name:"react/fiber/index.md"};function o(n,e,b,s,d,c){return r(),a("div",null,e[0]||(e[0]=[l('<h1 id="fiber数据结构-以及流程" tabindex="-1">Fiber数据结构，以及流程 <a class="header-anchor" href="#fiber数据结构-以及流程" aria-label="Permalink to &quot;Fiber数据结构，以及流程&quot;">​</a></h1><h2 id="fiber简介" tabindex="-1">Fiber简介 <a class="header-anchor" href="#fiber简介" aria-label="Permalink to &quot;Fiber简介&quot;">​</a></h2><p>Fiber是一种数据结构，也是一种算法</p><ul><li>增量渲染，将渲染工作拆分为多个小块，分布在多个帧中执行</li><li>调度能力，能够暂停，中止，复用工作，为不同更新分配优先级</li></ul><h2 id="fiber概念" tabindex="-1">Fiber概念 <a class="header-anchor" href="#fiber概念" aria-label="Permalink to &quot;Fiber概念&quot;">​</a></h2><p>在 Fiber 架构中，每个 React 元素都对应一个 Fiber 节点，它包含了组件的类型、状态、props 等信息。Fiber 节点构成了一个链表树结构</p><h2 id="双缓存技术" tabindex="-1">双缓存技术 <a class="header-anchor" href="#双缓存技术" aria-label="Permalink to &quot;双缓存技术&quot;">​</a></h2><p>React 会维护两棵 Fiber 树</p><ul><li>current 树：当前屏幕上显示内容对应的 Fiber 树</li><li>workInProgress 树：正在构建的 Fiber 树</li></ul><p>在内存中构建完整的更新，然后一次性提交到 DOM</p><h2 id="渲染阶段与提交阶段" tabindex="-1">渲染阶段与提交阶段 <a class="header-anchor" href="#渲染阶段与提交阶段" aria-label="Permalink to &quot;渲染阶段与提交阶段&quot;">​</a></h2><ul><li><strong>渲染阶段</strong><ul><li>创建 Fiber 树</li><li>标记需要进行的 DOM 更新（副作用）</li><li>可以被中断、暂停或重新开始</li></ul></li><li><strong>提交阶段</strong><ul><li>执行所有标记的副作用（DOM 更新）</li><li>一次性完成，确保 UI 一致性</li></ul></li></ul><h2 id="时间切片" tabindex="-1">时间切片 <a class="header-anchor" href="#时间切片" aria-label="Permalink to &quot;时间切片&quot;">​</a></h2><ul><li>Fiber 将渲染工作分成小任务，通过 requestIdleCallback（或 polyfill）在浏览器空闲时段执行</li><li>React 为不同更新分配不同优先级</li></ul>',14)]))}const f=i(t,[["render",o]]);export{u as __pageData,f as default};
